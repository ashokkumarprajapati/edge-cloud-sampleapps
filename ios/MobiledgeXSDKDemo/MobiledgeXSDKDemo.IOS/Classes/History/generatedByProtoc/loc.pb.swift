// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: loc.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Locations
// For IOS, see:
// https://developer.apple.com/documentation/corelocation/cllocation/1423718-init
// For Android, see:
// https://developer.android.com/reference/android/location/Location.html

import Foundation
//import SwiftProtobuf  // JT 18.11.10

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct DistributedMatchEngine_Loc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// latitude in WGS 84 coordinates
  var lat: Double {
    get {return _storage._lat}
    set {_uniqueStorage()._lat = newValue}
  }

  /// longitude in WGS 84 coordinates
  var long: Double {
    get {return _storage._long}
    set {_uniqueStorage()._long = newValue}
  }

  /// horizontal accuracy (radius in meters)
  var horizontalAccuracy: Double {
    get {return _storage._horizontalAccuracy}
    set {_uniqueStorage()._horizontalAccuracy = newValue}
  }

  /// veritical accuracy (meters)
  var verticalAccuracy: Double {
    get {return _storage._verticalAccuracy}
    set {_uniqueStorage()._verticalAccuracy = newValue}
  }

  /// On android only lat and long are guaranteed to be supplied
  /// altitude in meters
  var altitude: Double {
    get {return _storage._altitude}
    set {_uniqueStorage()._altitude = newValue}
  }

  /// course (IOS) / bearing (Android) (degrees east relative to true north)
  var course: Double {
    get {return _storage._course}
    set {_uniqueStorage()._course = newValue}
  }

  /// speed (IOS) / velocity (Android) (meters/sec)
  var speed: Double {
    get {return _storage._speed}
    set {_uniqueStorage()._speed = newValue}
  }

  /// timestamp
  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "distributed_match_engine"

extension DistributedMatchEngine_Loc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Loc"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lat"),
    2: .same(proto: "long"),
    3: .standard(proto: "horizontal_accuracy"),
    4: .standard(proto: "vertical_accuracy"),
    5: .same(proto: "altitude"),
    6: .same(proto: "course"),
    7: .same(proto: "speed"),
    8: .same(proto: "timestamp"),
  ]

  fileprivate class _StorageClass {
    var _lat: Double = 0
    var _long: Double = 0
    var _horizontalAccuracy: Double = 0
    var _verticalAccuracy: Double = 0
    var _altitude: Double = 0
    var _course: Double = 0
    var _speed: Double = 0
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _lat = source._lat
      _long = source._long
      _horizontalAccuracy = source._horizontalAccuracy
      _verticalAccuracy = source._verticalAccuracy
      _altitude = source._altitude
      _course = source._course
      _speed = source._speed
      _timestamp = source._timestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularDoubleField(value: &_storage._lat)
        case 2: try decoder.decodeSingularDoubleField(value: &_storage._long)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._horizontalAccuracy)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._verticalAccuracy)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._altitude)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._course)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._speed)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._lat != 0 {
        try visitor.visitSingularDoubleField(value: _storage._lat, fieldNumber: 1)
      }
      if _storage._long != 0 {
        try visitor.visitSingularDoubleField(value: _storage._long, fieldNumber: 2)
      }
      if _storage._horizontalAccuracy != 0 {
        try visitor.visitSingularDoubleField(value: _storage._horizontalAccuracy, fieldNumber: 3)
      }
      if _storage._verticalAccuracy != 0 {
        try visitor.visitSingularDoubleField(value: _storage._verticalAccuracy, fieldNumber: 4)
      }
      if _storage._altitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._altitude, fieldNumber: 5)
      }
      if _storage._course != 0 {
        try visitor.visitSingularDoubleField(value: _storage._course, fieldNumber: 6)
      }
      if _storage._speed != 0 {
        try visitor.visitSingularDoubleField(value: _storage._speed, fieldNumber: 7)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DistributedMatchEngine_Loc, rhs: DistributedMatchEngine_Loc) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._lat != rhs_storage._lat {return false}
        if _storage._long != rhs_storage._long {return false}
        if _storage._horizontalAccuracy != rhs_storage._horizontalAccuracy {return false}
        if _storage._verticalAccuracy != rhs_storage._verticalAccuracy {return false}
        if _storage._altitude != rhs_storage._altitude {return false}
        if _storage._course != rhs_storage._course {return false}
        if _storage._speed != rhs_storage._speed {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
