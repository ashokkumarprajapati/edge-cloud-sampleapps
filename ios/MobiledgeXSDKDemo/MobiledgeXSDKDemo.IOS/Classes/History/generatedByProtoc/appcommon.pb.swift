// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: appcommon.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// App common

import Foundation
import SwiftProtobuf  // JT 18.11.10

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// LProto indicates which protocol to use for accessing an application on a particular port. This is required by Kubernetes for port mapping.
enum DistributedMatchEngine_LProto: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Unknown protocol
  case unknown // = 0

  /// TCP (L4) protocol
  case tcp // = 1

  /// UDP (L4) protocol
  case udp // = 2

  /// HTTP (L7 tcp) protocol
  case http // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .tcp
    case 2: self = .udp
    case 3: self = .http
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .tcp: return 1
    case .udp: return 2
    case .http: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension DistributedMatchEngine_LProto: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [DistributedMatchEngine_LProto] = [
    .unknown,
    .tcp,
    .udp,
    .http,
  ]
}

#endif  // swift(>=4.2)

/// AppPort describes an L4 or L7 public access port/path mapping. This is used to track external to internal mappings for access via a shared load balancer or reverse proxy.
struct DistributedMatchEngine_AppPort {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// TCP (L4), UDP (L4), or HTTP (L7) protocol
  var proto: DistributedMatchEngine_LProto = .unknown

  /// Container port
  var internalPort: Int32 = 0

  /// Public facing port for TCP/UDP (may be mapped on shared LB reverse proxy)
  var publicPort: Int32 = 0

  /// Public facing path for HTTP L7 access.
  var publicPath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "distributed_match_engine"

extension DistributedMatchEngine_LProto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LProtoUnknown"),
    1: .same(proto: "LProtoTCP"),
    2: .same(proto: "LProtoUDP"),
    3: .same(proto: "LProtoHTTP"),
  ]
}

extension DistributedMatchEngine_AppPort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppPort"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "proto"),
    2: .standard(proto: "internal_port"),
    3: .standard(proto: "public_port"),
    4: .standard(proto: "public_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.proto)
      case 2: try decoder.decodeSingularInt32Field(value: &self.internalPort)
      case 3: try decoder.decodeSingularInt32Field(value: &self.publicPort)
      case 4: try decoder.decodeSingularStringField(value: &self.publicPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.proto != .unknown {
      try visitor.visitSingularEnumField(value: self.proto, fieldNumber: 1)
    }
    if self.internalPort != 0 {
      try visitor.visitSingularInt32Field(value: self.internalPort, fieldNumber: 2)
    }
    if self.publicPort != 0 {
      try visitor.visitSingularInt32Field(value: self.publicPort, fieldNumber: 3)
    }
    if !self.publicPath.isEmpty {
      try visitor.visitSingularStringField(value: self.publicPath, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DistributedMatchEngine_AppPort, rhs: DistributedMatchEngine_AppPort) -> Bool {
    if lhs.proto != rhs.proto {return false}
    if lhs.internalPort != rhs.internalPort {return false}
    if lhs.publicPort != rhs.publicPort {return false}
    if lhs.publicPath != rhs.publicPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
