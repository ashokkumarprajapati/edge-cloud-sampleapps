// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dynamic-location-group.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Dynamic Location Group APIs

import Foundation
//import SwiftProtobuf  // JT 18.11.10

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct DistributedMatchEngine_DlgMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ver: UInt32 = 0

  /// Dynamic Location Group Id
  var lgID: UInt64 = 0

  /// Group Cookie if secure
  var groupCookie: String = String()

  /// Message ID
  var messageID: UInt64 = 0

  var ackType: DistributedMatchEngine_DlgMessage.DlgAck = .eachMessage

  /// Message
  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Need acknowledgement
  enum DlgAck: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case eachMessage // = 0
    case dlgAsyEveryNmessage // = 1
    case dlgNoAck // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .eachMessage
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .eachMessage
      case 1: self = .dlgAsyEveryNmessage
      case 2: self = .dlgNoAck
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .eachMessage: return 0
      case .dlgAsyEveryNmessage: return 1
      case .dlgNoAck: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension DistributedMatchEngine_DlgMessage.DlgAck: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [DistributedMatchEngine_DlgMessage.DlgAck] = [
    .eachMessage,
    .dlgAsyEveryNmessage,
    .dlgNoAck,
  ]
}

#endif  // swift(>=4.2)

struct DistributedMatchEngine_DlgReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ver: UInt32 = 0

  /// AckId
  var ackID: UInt64 = 0

  /// Group Cookie for Secure comm
  var groupCookie: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "distributed_match_engine"

extension DistributedMatchEngine_DlgMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DlgMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ver"),
    2: .same(proto: "LgId"),
    3: .same(proto: "GroupCookie"),
    4: .same(proto: "MessageId"),
    5: .same(proto: "AckType"),
    6: .same(proto: "Message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.ver)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.lgID)
      case 3: try decoder.decodeSingularStringField(value: &self.groupCookie)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.messageID)
      case 5: try decoder.decodeSingularEnumField(value: &self.ackType)
      case 6: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ver != 0 {
      try visitor.visitSingularUInt32Field(value: self.ver, fieldNumber: 1)
    }
    if self.lgID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lgID, fieldNumber: 2)
    }
    if !self.groupCookie.isEmpty {
      try visitor.visitSingularStringField(value: self.groupCookie, fieldNumber: 3)
    }
    if self.messageID != 0 {
      try visitor.visitSingularUInt64Field(value: self.messageID, fieldNumber: 4)
    }
    if self.ackType != .eachMessage {
      try visitor.visitSingularEnumField(value: self.ackType, fieldNumber: 5)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DistributedMatchEngine_DlgMessage, rhs: DistributedMatchEngine_DlgMessage) -> Bool {
    if lhs.ver != rhs.ver {return false}
    if lhs.lgID != rhs.lgID {return false}
    if lhs.groupCookie != rhs.groupCookie {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.ackType != rhs.ackType {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DistributedMatchEngine_DlgMessage.DlgAck: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DlgAckEachMessage"),
    1: .same(proto: "DlgAsyEveryNMessage"),
    2: .same(proto: "DlgNoAck"),
  ]
}

extension DistributedMatchEngine_DlgReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DlgReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ver"),
    2: .same(proto: "AckId"),
    3: .same(proto: "GroupCookie"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.ver)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.ackID)
      case 3: try decoder.decodeSingularStringField(value: &self.groupCookie)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ver != 0 {
      try visitor.visitSingularUInt32Field(value: self.ver, fieldNumber: 1)
    }
    if self.ackID != 0 {
      try visitor.visitSingularUInt64Field(value: self.ackID, fieldNumber: 2)
    }
    if !self.groupCookie.isEmpty {
      try visitor.visitSingularStringField(value: self.groupCookie, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DistributedMatchEngine_DlgReply, rhs: DistributedMatchEngine_DlgReply) -> Bool {
    if lhs.ver != rhs.ver {return false}
    if lhs.ackID != rhs.ackID {return false}
    if lhs.groupCookie != rhs.groupCookie {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
